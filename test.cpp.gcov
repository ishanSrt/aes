        -:    0:Source:tests/test.cpp
        -:    0:Graph:test.gcno
        -:    0:Data:test.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:#include <gtest/gtest.h>
        -:    3:#include "../src/aes.cpp"
        -:    4:
        -:    5:using namespace std;
        -:    6:
        2:    7:TEST(StdTestCase1, KeyLen128)
        -:    8:{
        1:    9:	byte message[16] = {0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34};
        1:   10:	byte cipherKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
        1:   11:	Aes aes(128);
        -:   12:	byte* output;
        -:   13:
        1:   14:	byte** w = new byte*[4]; //allocate memory for rows  (4 bytes)
        5:   15:	for(int i = 0; i < 4; i++) //allocate columns, the number of key expasions
        -:   16:	{
        4:   17:		w[i] = new byte[aes.getNb() * (aes.getNr()+1)]; //key schedule for 128 its 44
        -:   18:	}
        -:   19:	
        1:   20:	w = aes.KeyExpansion(cipherKey, w);
        -:   21:
        1:   22:	output = aes.Cipher(message, w);
        1:   23:	string expected = "39 25 84 1d 2 dc 9 fb dc 11 85 97 19 6a b 32";
       2*:   24:	ASSERT_EQ(expected,aes.blockToReadable(output));
        -:   25:
        1:   26:	output = aes.InvCipher(output, w);  //decrypt the message
        1:   27:	expected = "32 43 f6 a8 88 5a 30 8d 31 31 98 a2 e0 37 7 34";
       2*:   28:	ASSERT_EQ(expected,aes.blockToReadable(output));
        -:   29:}
------------------
_ZN27StdTestCase1_KeyLen128_Test8TestBodyEv:
        1:    7:TEST(StdTestCase1, KeyLen128)
        -:    8:{
        1:    9:	byte message[16] = {0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34};
        1:   10:	byte cipherKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
        1:   11:	Aes aes(128);
        -:   12:	byte* output;
        -:   13:
        1:   14:	byte** w = new byte*[4]; //allocate memory for rows  (4 bytes)
        5:   15:	for(int i = 0; i < 4; i++) //allocate columns, the number of key expasions
        -:   16:	{
        4:   17:		w[i] = new byte[aes.getNb() * (aes.getNr()+1)]; //key schedule for 128 its 44
        -:   18:	}
        -:   19:	
        1:   20:	w = aes.KeyExpansion(cipherKey, w);
        -:   21:
        1:   22:	output = aes.Cipher(message, w);
        1:   23:	string expected = "39 25 84 1d 2 dc 9 fb dc 11 85 97 19 6a b 32";
       2*:   24:	ASSERT_EQ(expected,aes.blockToReadable(output));
        -:   25:
        1:   26:	output = aes.InvCipher(output, w);  //decrypt the message
        1:   27:	expected = "32 43 f6 a8 88 5a 30 8d 31 31 98 a2 e0 37 7 34";
       2*:   28:	ASSERT_EQ(expected,aes.blockToReadable(output));
        -:   29:}
------------------
_ZN27StdTestCase1_KeyLen128_TestC2Ev:
        1:    7:TEST(StdTestCase1, KeyLen128)
------------------
        -:   30:
        2:   31:TEST(StdTestCase1, KeyLen192)
        -:   32:{
        1:   33:	Aes aes(192);
        1:   34:	byte message[16] = {0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34};
       1*:   35:	byte cipherKey[aes.getNk()*aes.getNb()] = {0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b};
        -:   36:	
        -:   37:	byte* output;
        -:   38:
        1:   39:	byte** w = new byte*[4]; //allocate memory for rows  (4 bytes)
        5:   40:	for(int i = 0; i < 4; i++) //allocate columns, the number of key expasions
        -:   41:	{
        4:   42:		w[i] = new byte[aes.getNb() * (aes.getNr()+1)]; //key schedule for 128 its 44
        -:   43:	}
        -:   44:	
        1:   45:	w = aes.KeyExpansion(cipherKey, w);
        -:   46:
        1:   47:	output = aes.Cipher(message, w);
        1:   48:	string expectedCipher = "58 5e 9f b6 c2 72 2b 9a f4 f4 92 c1 2b b0 24 c1";
       2*:   49:	ASSERT_EQ(expectedCipher,aes.blockToReadable(output));
        -:   50:
        1:   51:	output = aes.InvCipher(output, w);  //decrypt the message
        1:   52:	string expectedMessage = "32 43 f6 a8 88 5a 30 8d 31 31 98 a2 e0 37 7 34";
       3*:   53:	ASSERT_EQ(expectedMessage,aes.blockToReadable(output));
        -:   54:}
------------------
_ZN27StdTestCase1_KeyLen192_Test8TestBodyEv:
        1:   31:TEST(StdTestCase1, KeyLen192)
        -:   32:{
        1:   33:	Aes aes(192);
        1:   34:	byte message[16] = {0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34};
       1*:   35:	byte cipherKey[aes.getNk()*aes.getNb()] = {0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b};
        -:   36:	
        -:   37:	byte* output;
        -:   38:
        1:   39:	byte** w = new byte*[4]; //allocate memory for rows  (4 bytes)
        5:   40:	for(int i = 0; i < 4; i++) //allocate columns, the number of key expasions
        -:   41:	{
        4:   42:		w[i] = new byte[aes.getNb() * (aes.getNr()+1)]; //key schedule for 128 its 44
        -:   43:	}
        -:   44:	
        1:   45:	w = aes.KeyExpansion(cipherKey, w);
        -:   46:
        1:   47:	output = aes.Cipher(message, w);
        1:   48:	string expectedCipher = "58 5e 9f b6 c2 72 2b 9a f4 f4 92 c1 2b b0 24 c1";
       2*:   49:	ASSERT_EQ(expectedCipher,aes.blockToReadable(output));
        -:   50:
        1:   51:	output = aes.InvCipher(output, w);  //decrypt the message
        1:   52:	string expectedMessage = "32 43 f6 a8 88 5a 30 8d 31 31 98 a2 e0 37 7 34";
       3*:   53:	ASSERT_EQ(expectedMessage,aes.blockToReadable(output));
        -:   54:}
------------------
_ZN27StdTestCase1_KeyLen192_TestC2Ev:
        1:   31:TEST(StdTestCase1, KeyLen192)
------------------
        -:   55:
        2:   56:TEST(StdTestCase1, KeyLen256)
        -:   57:{
        1:   58:	Aes aes(256);
        1:   59:	byte message[16] = {0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34};
       1*:   60:	byte cipherKey[aes.getNk()*aes.getNb()] = {0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81, 0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4};
        -:   61:	
        -:   62:	byte* output;
        -:   63:
        1:   64:	byte** w = new byte*[4]; //allocate memory for rows  (4 bytes)
        5:   65:	for(int i = 0; i < 4; i++) //allocate columns, the number of key expasions
        -:   66:	{
        4:   67:		w[i] = new byte[aes.getNb() * (aes.getNr()+1)]; //key schedule for 128 its 44
        -:   68:	}
        -:   69:	
        1:   70:	w = aes.KeyExpansion(cipherKey, w);
        -:   71:
        1:   72:	output = aes.Cipher(message, w);
        1:   73:	string expectedCipher = "30 21 61 3a 97 3e 58 2f 4a 29 23 41 37 ae c4 94";
       2*:   74:	ASSERT_EQ(expectedCipher,aes.blockToReadable(output));
        -:   75:
        1:   76:	output = aes.InvCipher(output, w);  //decrypt the message
        1:   77:	string expectedMessage = "32 43 f6 a8 88 5a 30 8d 31 31 98 a2 e0 37 7 34";
       3*:   78:	ASSERT_EQ(expectedMessage,aes.blockToReadable(output));
        -:   79:}
------------------
_ZN27StdTestCase1_KeyLen256_Test8TestBodyEv:
        1:   56:TEST(StdTestCase1, KeyLen256)
        -:   57:{
        1:   58:	Aes aes(256);
        1:   59:	byte message[16] = {0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34};
       1*:   60:	byte cipherKey[aes.getNk()*aes.getNb()] = {0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81, 0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4};
        -:   61:	
        -:   62:	byte* output;
        -:   63:
        1:   64:	byte** w = new byte*[4]; //allocate memory for rows  (4 bytes)
        5:   65:	for(int i = 0; i < 4; i++) //allocate columns, the number of key expasions
        -:   66:	{
        4:   67:		w[i] = new byte[aes.getNb() * (aes.getNr()+1)]; //key schedule for 128 its 44
        -:   68:	}
        -:   69:	
        1:   70:	w = aes.KeyExpansion(cipherKey, w);
        -:   71:
        1:   72:	output = aes.Cipher(message, w);
        1:   73:	string expectedCipher = "30 21 61 3a 97 3e 58 2f 4a 29 23 41 37 ae c4 94";
       2*:   74:	ASSERT_EQ(expectedCipher,aes.blockToReadable(output));
        -:   75:
        1:   76:	output = aes.InvCipher(output, w);  //decrypt the message
        1:   77:	string expectedMessage = "32 43 f6 a8 88 5a 30 8d 31 31 98 a2 e0 37 7 34";
       3*:   78:	ASSERT_EQ(expectedMessage,aes.blockToReadable(output));
        -:   79:}
------------------
_ZN27StdTestCase1_KeyLen256_TestC2Ev:
        1:   56:TEST(StdTestCase1, KeyLen256)
------------------
        -:   80:
        -:   81://!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        -:   82:// WRONG TEST CASE USING 256 bit key but aes algorithm working for 128 bit key
        -:   83://!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        2:   84:TEST(WrongTestCaseStdTestCase1AesWorkingWith128, KeyLen256)
        -:   85:{
        1:   86:	Aes aes(128);
        1:   87:	byte message[16] = {0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34};
       1*:   88:	byte cipherKey[aes.getNk()*aes.getNb()] = {0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81, 0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4};
        -:   89:	
        -:   90:	byte* output;
        -:   91:
        1:   92:	byte** w = new byte*[4]; //allocate memory for rows  (4 bytes)
        5:   93:	for(int i = 0; i < 4; i++) //allocate columns, the number of key expasions
        -:   94:	{
        4:   95:		w[i] = new byte[aes.getNb() * (aes.getNr()+1)]; //key schedule for 128 its 44
        -:   96:	}
        -:   97:	
        1:   98:	w = aes.KeyExpansion(cipherKey, w);
        -:   99:
        1:  100:	output = aes.Cipher(message, w);
        1:  101:	string expectedCipher = "6 4a 49 df 5a db e5 9a 23 d2 9a a3 15 b4 e5 3d";
       2*:  102:	ASSERT_EQ(expectedCipher,aes.blockToReadable(output));
        -:  103:
        1:  104:	output = aes.InvCipher(output, w);  //decrypt the message
        1:  105:	string expectedMessage = "32 43 f6 a8 88 5a 30 8d 31 31 98 a2 e0 37 7 34";
       3*:  106:	ASSERT_EQ(expectedMessage,aes.blockToReadable(output));
        -:  107:}
------------------
_ZN57WrongTestCaseStdTestCase1AesWorkingWith128_KeyLen256_Test8TestBodyEv:
        1:   84:TEST(WrongTestCaseStdTestCase1AesWorkingWith128, KeyLen256)
        -:   85:{
        1:   86:	Aes aes(128);
        1:   87:	byte message[16] = {0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34};
       1*:   88:	byte cipherKey[aes.getNk()*aes.getNb()] = {0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81, 0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4};
        -:   89:	
        -:   90:	byte* output;
        -:   91:
        1:   92:	byte** w = new byte*[4]; //allocate memory for rows  (4 bytes)
        5:   93:	for(int i = 0; i < 4; i++) //allocate columns, the number of key expasions
        -:   94:	{
        4:   95:		w[i] = new byte[aes.getNb() * (aes.getNr()+1)]; //key schedule for 128 its 44
        -:   96:	}
        -:   97:	
        1:   98:	w = aes.KeyExpansion(cipherKey, w);
        -:   99:
        1:  100:	output = aes.Cipher(message, w);
        1:  101:	string expectedCipher = "6 4a 49 df 5a db e5 9a 23 d2 9a a3 15 b4 e5 3d";
       2*:  102:	ASSERT_EQ(expectedCipher,aes.blockToReadable(output));
        -:  103:
        1:  104:	output = aes.InvCipher(output, w);  //decrypt the message
        1:  105:	string expectedMessage = "32 43 f6 a8 88 5a 30 8d 31 31 98 a2 e0 37 7 34";
       3*:  106:	ASSERT_EQ(expectedMessage,aes.blockToReadable(output));
        -:  107:}
------------------
_ZN57WrongTestCaseStdTestCase1AesWorkingWith128_KeyLen256_TestC2Ev:
        1:   84:TEST(WrongTestCaseStdTestCase1AesWorkingWith128, KeyLen256)
------------------
        -:  108://!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        -:  109:// WRONG TEST CASE USING 256 bit key but aes algorithm working for 128 bit key ^^^^
        -:  110://!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        -:  111:
        -:  112:
        2:  113:TEST(StdTestCase2, KeyLen128)
        -:  114:{
        1:  115:	Aes aes(128);
        1:  116:	byte message[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
       1*:  117:	byte cipherKey[aes.getNk()*aes.getNb()] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        -:  118:	
        -:  119:	byte* output;
        -:  120:
        1:  121:	byte** w = new byte*[4]; //allocate memory for rows  (4 bytes)
        5:  122:	for(int i = 0; i < 4; i++) //allocate columns, the number of key expasions
        -:  123:	{
        4:  124:		w[i] = new byte[aes.getNb() * (aes.getNr()+1)]; //key schedule for 128 its 44
        -:  125:	}
        -:  126:	
        1:  127:	w = aes.KeyExpansion(cipherKey, w);
        -:  128:
        1:  129:	output = aes.Cipher(message, w);
        1:  130:	string expectedCipher = "69 c4 e0 d8 6a 7b 4 30 d8 cd b7 80 70 b4 c5 5a";
       2*:  131:	ASSERT_EQ(expectedCipher,aes.blockToReadable(output));
        -:  132:
        1:  133:	output = aes.InvCipher(output, w);  //decrypt the message
        1:  134:	string expectedMessage = "0 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff";
       3*:  135:	ASSERT_EQ(expectedMessage,aes.blockToReadable(output));
        -:  136:}
------------------
_ZN27StdTestCase2_KeyLen128_Test8TestBodyEv:
        1:  113:TEST(StdTestCase2, KeyLen128)
        -:  114:{
        1:  115:	Aes aes(128);
        1:  116:	byte message[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
       1*:  117:	byte cipherKey[aes.getNk()*aes.getNb()] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};
        -:  118:	
        -:  119:	byte* output;
        -:  120:
        1:  121:	byte** w = new byte*[4]; //allocate memory for rows  (4 bytes)
        5:  122:	for(int i = 0; i < 4; i++) //allocate columns, the number of key expasions
        -:  123:	{
        4:  124:		w[i] = new byte[aes.getNb() * (aes.getNr()+1)]; //key schedule for 128 its 44
        -:  125:	}
        -:  126:	
        1:  127:	w = aes.KeyExpansion(cipherKey, w);
        -:  128:
        1:  129:	output = aes.Cipher(message, w);
        1:  130:	string expectedCipher = "69 c4 e0 d8 6a 7b 4 30 d8 cd b7 80 70 b4 c5 5a";
       2*:  131:	ASSERT_EQ(expectedCipher,aes.blockToReadable(output));
        -:  132:
        1:  133:	output = aes.InvCipher(output, w);  //decrypt the message
        1:  134:	string expectedMessage = "0 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff";
       3*:  135:	ASSERT_EQ(expectedMessage,aes.blockToReadable(output));
        -:  136:}
------------------
_ZN27StdTestCase2_KeyLen128_TestC2Ev:
        1:  113:TEST(StdTestCase2, KeyLen128)
------------------
        -:  137:
        2:  138:TEST(StdTestCase2, KeyLen192)
        -:  139:{
        1:  140:	Aes aes(192);
        1:  141:	byte message[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
       1*:  142:	byte cipherKey[aes.getNk()*aes.getNb()] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17};
        -:  143:	
        -:  144:	byte* output;
        -:  145:
        1:  146:	byte** w = new byte*[4]; //allocate memory for rows  (4 bytes)
        5:  147:	for(int i = 0; i < 4; i++) //allocate columns, the number of key expasions
        -:  148:	{
        4:  149:		w[i] = new byte[aes.getNb() * (aes.getNr()+1)]; //key schedule for 128 its 44
        -:  150:	}
        -:  151:	
        1:  152:	w = aes.KeyExpansion(cipherKey, w);
        -:  153:
        1:  154:	output = aes.Cipher(message, w);
        1:  155:	string expectedCipher = "dd a9 7c a4 86 4c df e0 6e af 70 a0 ec d 71 91";
       2*:  156:	ASSERT_EQ(expectedCipher,aes.blockToReadable(output));
        -:  157:
        1:  158:	output = aes.InvCipher(output, w);  //decrypt the message
        1:  159:	string expectedMessage = "0 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff";
       3*:  160:	ASSERT_EQ(expectedMessage,aes.blockToReadable(output));
        -:  161:}
------------------
_ZN27StdTestCase2_KeyLen192_Test8TestBodyEv:
        1:  138:TEST(StdTestCase2, KeyLen192)
        -:  139:{
        1:  140:	Aes aes(192);
        1:  141:	byte message[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
       1*:  142:	byte cipherKey[aes.getNk()*aes.getNb()] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17};
        -:  143:	
        -:  144:	byte* output;
        -:  145:
        1:  146:	byte** w = new byte*[4]; //allocate memory for rows  (4 bytes)
        5:  147:	for(int i = 0; i < 4; i++) //allocate columns, the number of key expasions
        -:  148:	{
        4:  149:		w[i] = new byte[aes.getNb() * (aes.getNr()+1)]; //key schedule for 128 its 44
        -:  150:	}
        -:  151:	
        1:  152:	w = aes.KeyExpansion(cipherKey, w);
        -:  153:
        1:  154:	output = aes.Cipher(message, w);
        1:  155:	string expectedCipher = "dd a9 7c a4 86 4c df e0 6e af 70 a0 ec d 71 91";
       2*:  156:	ASSERT_EQ(expectedCipher,aes.blockToReadable(output));
        -:  157:
        1:  158:	output = aes.InvCipher(output, w);  //decrypt the message
        1:  159:	string expectedMessage = "0 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff";
       3*:  160:	ASSERT_EQ(expectedMessage,aes.blockToReadable(output));
        -:  161:}
------------------
_ZN27StdTestCase2_KeyLen192_TestC2Ev:
        1:  138:TEST(StdTestCase2, KeyLen192)
------------------
        -:  162:
        2:  163:TEST(StdTestCase2, KeyLen256)
        -:  164:{
        1:  165:	Aes aes(256);
        1:  166:	byte message[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
        1:  167:	byte cipherKey[aes.getNk()*aes.getNb()] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
        -:  168:											   0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
       1*:  169:											   0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f};
        -:  170:	
        -:  171:	byte* output;
        -:  172:
        1:  173:	byte** w = new byte*[4]; //allocate memory for rows  (4 bytes)
        5:  174:	for(int i = 0; i < 4; i++) //allocate columns, the number of key expasions
        -:  175:	{
        4:  176:		w[i] = new byte[aes.getNb() * (aes.getNr()+1)]; //key schedule for 128 its 44
        -:  177:	}
        -:  178:	
        1:  179:	w = aes.KeyExpansion(cipherKey, w);
        -:  180:
        1:  181:	output = aes.Cipher(message, w);
        1:  182:	string expectedCipher = "8e a2 b7 ca 51 67 45 bf ea fc 49 90 4b 49 60 89";
       2*:  183:	ASSERT_EQ(expectedCipher,aes.blockToReadable(output));
        -:  184:
        1:  185:	output = aes.InvCipher(output, w);  //decrypt the message
        1:  186:	string expectedMessage = "0 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff";
       3*:  187:	ASSERT_EQ(expectedMessage,aes.blockToReadable(output));
        -:  188:}
------------------
_ZN27StdTestCase2_KeyLen256_Test8TestBodyEv:
        1:  163:TEST(StdTestCase2, KeyLen256)
        -:  164:{
        1:  165:	Aes aes(256);
        1:  166:	byte message[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};
        1:  167:	byte cipherKey[aes.getNk()*aes.getNb()] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
        -:  168:											   0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
       1*:  169:											   0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f};
        -:  170:	
        -:  171:	byte* output;
        -:  172:
        1:  173:	byte** w = new byte*[4]; //allocate memory for rows  (4 bytes)
        5:  174:	for(int i = 0; i < 4; i++) //allocate columns, the number of key expasions
        -:  175:	{
        4:  176:		w[i] = new byte[aes.getNb() * (aes.getNr()+1)]; //key schedule for 128 its 44
        -:  177:	}
        -:  178:	
        1:  179:	w = aes.KeyExpansion(cipherKey, w);
        -:  180:
        1:  181:	output = aes.Cipher(message, w);
        1:  182:	string expectedCipher = "8e a2 b7 ca 51 67 45 bf ea fc 49 90 4b 49 60 89";
       2*:  183:	ASSERT_EQ(expectedCipher,aes.blockToReadable(output));
        -:  184:
        1:  185:	output = aes.InvCipher(output, w);  //decrypt the message
        1:  186:	string expectedMessage = "0 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff";
       3*:  187:	ASSERT_EQ(expectedMessage,aes.blockToReadable(output));
        -:  188:}
------------------
_ZN27StdTestCase2_KeyLen256_TestC2Ev:
        1:  163:TEST(StdTestCase2, KeyLen256)
------------------
        -:  189:
        2:  190:TEST(TestECB, EncryptTest1)
        -:  191:{
        1:  192:	Aes aes(128);
        1:  193:	byte message[32] = {0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34,
        -:  194:			    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
        1:  195:	byte cipherKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
        1:  196:	string expectedCipher = "39 25 84 1d 2 dc 9 fb dc 11 85 97 19 6a b 32 7e 59 37 9b 52 33 96 9d 25 a5 ad 2c e3 35 cb 3e 7e 59 37 9b 52 33 96 9d 25 a5 ad 2c e3 35 cb 3e";
        1:  197:	byte* output = aes.encryptECB(message, 32, cipherKey);
       2*:  198:	ASSERT_EQ(expectedCipher, aes.blockToReadable(output, 48));
        -:  199:}
------------------
_ZN25TestECB_EncryptTest1_Test8TestBodyEv:
        1:  190:TEST(TestECB, EncryptTest1)
        -:  191:{
        1:  192:	Aes aes(128);
        1:  193:	byte message[32] = {0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34,
        -:  194:			    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
        1:  195:	byte cipherKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
        1:  196:	string expectedCipher = "39 25 84 1d 2 dc 9 fb dc 11 85 97 19 6a b 32 7e 59 37 9b 52 33 96 9d 25 a5 ad 2c e3 35 cb 3e 7e 59 37 9b 52 33 96 9d 25 a5 ad 2c e3 35 cb 3e";
        1:  197:	byte* output = aes.encryptECB(message, 32, cipherKey);
       2*:  198:	ASSERT_EQ(expectedCipher, aes.blockToReadable(output, 48));
        -:  199:}
------------------
_ZN25TestECB_EncryptTest1_TestC2Ev:
        1:  190:TEST(TestECB, EncryptTest1)
------------------
        -:  200:
        2:  201:TEST(TestECB, DecryptTest1)
        -:  202:{
        1:  203:	Aes aes(128);
        1:  204:	byte cipherKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
        1:  205:	byte Cipher[32] = {0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb, 0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a, 0x0b, 0x32, 
        -:  206:					   0x7e, 0x59, 0x37, 0x9b, 0x52, 0x33, 0x96, 0x9d, 0x25, 0xa5, 0xad, 0x2c, 0xe3, 0x35, 0xcb, 0x3e};
        1:  207:	string expectedCipher = "32 43 f6 a8 88 5a 30 8d 31 31 98 a2 e0 37 7 34";
        1:  208:	byte* output = aes.decryptECB(Cipher, 32, cipherKey);
       2*:  209:	ASSERT_EQ(expectedCipher, aes.blockToReadable(output));
        -:  210:}
------------------
_ZN25TestECB_DecryptTest1_Test8TestBodyEv:
        1:  201:TEST(TestECB, DecryptTest1)
        -:  202:{
        1:  203:	Aes aes(128);
        1:  204:	byte cipherKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
        1:  205:	byte Cipher[32] = {0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb, 0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a, 0x0b, 0x32, 
        -:  206:					   0x7e, 0x59, 0x37, 0x9b, 0x52, 0x33, 0x96, 0x9d, 0x25, 0xa5, 0xad, 0x2c, 0xe3, 0x35, 0xcb, 0x3e};
        1:  207:	string expectedCipher = "32 43 f6 a8 88 5a 30 8d 31 31 98 a2 e0 37 7 34";
        1:  208:	byte* output = aes.decryptECB(Cipher, 32, cipherKey);
       2*:  209:	ASSERT_EQ(expectedCipher, aes.blockToReadable(output));
        -:  210:}
------------------
_ZN25TestECB_DecryptTest1_TestC2Ev:
        1:  201:TEST(TestECB, DecryptTest1)
------------------
        -:  211:
        2:  212:TEST(TestCBC, Test1)
        -:  213:{
        1:  214:	Aes aes(128);
        1:  215:	byte message[64] = {0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
        -:  216:			    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e ,0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
        -:  217:			    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
        -:  218:			    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10};
        -:  219:
        1:  220:	byte cipherKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
        1:  221:	byte IV[16] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        -:  222:	string expectedCipher = "76 49 ab ac 81 19 b2 46 ce e9 8e 9b 12 e9 19 7d "
        -:  223:				"50 86 cb 9b 50 72 19 ee 95 db 11 3a 91 76 78 b2 "
        -:  224:				"73 be d6 b8 e3 c1 74 3b 71 16 e6 9e 22 22 95 16 "
        -:  225:				"3f f1 ca a1 68 1f ac 9 12 e ca 30 75 86 e1 a7 "
        1:  226:				"7e 31 3b 5d 59 58 52 8d bb 41 56 13 d 93 af 3c";//because of padding
        1:  227:	byte *output = aes.encryptCBC(message, 64, cipherKey, IV);
        -:  228:	// cout << aes.blockToReadable(output, 80);
       2*:  229:	ASSERT_EQ(expectedCipher, aes.blockToReadable(output, 80));
        -:  230:
        1:  231:	byte *input = aes.decryptCBC(output, 80, cipherKey, IV);
        -:  232:	// cout << aes.blockToReadable(input, 64);
        -:  233:	string expectedMessage = "6b c1 be e2 2e 40 9f 96 e9 3d 7e 11 73 93 17 2a "
        -:  234:							 "ae 2d 8a 57 1e 3 ac 9c 9e b7 6f ac 45 af 8e 51 "
        -:  235:							 "30 c8 1c 46 a3 5c e4 11 e5 fb c1 19 1a a 52 ef "
        1:  236:							 "f6 9f 24 45 df 4f 9b 17 ad 2b 41 7b e6 6c 37 10";
       2*:  237:	ASSERT_EQ(expectedMessage, aes.blockToReadable(input, 64));
        -:  238:
        -:  239:}
------------------
_ZN18TestCBC_Test1_Test8TestBodyEv:
        1:  212:TEST(TestCBC, Test1)
        -:  213:{
        1:  214:	Aes aes(128);
        1:  215:	byte message[64] = {0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
        -:  216:			    0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e ,0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
        -:  217:			    0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
        -:  218:			    0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10};
        -:  219:
        1:  220:	byte cipherKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
        1:  221:	byte IV[16] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        -:  222:	string expectedCipher = "76 49 ab ac 81 19 b2 46 ce e9 8e 9b 12 e9 19 7d "
        -:  223:				"50 86 cb 9b 50 72 19 ee 95 db 11 3a 91 76 78 b2 "
        -:  224:				"73 be d6 b8 e3 c1 74 3b 71 16 e6 9e 22 22 95 16 "
        -:  225:				"3f f1 ca a1 68 1f ac 9 12 e ca 30 75 86 e1 a7 "
        1:  226:				"7e 31 3b 5d 59 58 52 8d bb 41 56 13 d 93 af 3c";//because of padding
        1:  227:	byte *output = aes.encryptCBC(message, 64, cipherKey, IV);
        -:  228:	// cout << aes.blockToReadable(output, 80);
       2*:  229:	ASSERT_EQ(expectedCipher, aes.blockToReadable(output, 80));
        -:  230:
        1:  231:	byte *input = aes.decryptCBC(output, 80, cipherKey, IV);
        -:  232:	// cout << aes.blockToReadable(input, 64);
        -:  233:	string expectedMessage = "6b c1 be e2 2e 40 9f 96 e9 3d 7e 11 73 93 17 2a "
        -:  234:							 "ae 2d 8a 57 1e 3 ac 9c 9e b7 6f ac 45 af 8e 51 "
        -:  235:							 "30 c8 1c 46 a3 5c e4 11 e5 fb c1 19 1a a 52 ef "
        1:  236:							 "f6 9f 24 45 df 4f 9b 17 ad 2b 41 7b e6 6c 37 10";
       2*:  237:	ASSERT_EQ(expectedMessage, aes.blockToReadable(input, 64));
        -:  238:
        -:  239:}
------------------
_ZN18TestCBC_Test1_TestC2Ev:
        1:  212:TEST(TestCBC, Test1)
------------------
        -:  240:
        2:  241:TEST(TestOFB, Test1)
        -:  242:{
        1:  243:	Aes aes(128);
        -:  244:
        1:  245:	byte message[64] = {0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
        -:  246:	0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
        -:  247:	0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
        -:  248:	0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10};
        -:  249:
        1:  250:	byte cipherKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
        1:  251:	byte IV[16] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        -:  252:	string expectedCipher = "3b 3f d9 2e b7 2d ad 20 33 34 49 f8 e8 3c fb 4a "
        -:  253:							"77 89 50 8d 16 91 8f 3 f5 3c 52 da c5 4e d8 25 "
        -:  254:							"97 40 5 1e 9c 5f ec f6 43 44 f7 a8 22 60 ed cc "
        1:  255:							"30 4c 65 28 f6 59 c7 78 66 a5 10 d9 c1 d6 ae 5e";
        1:  256:	byte *output = aes.encryptOFB(message, 64, cipherKey, IV);
        -:  257:	// cout << aes.blockToReadable(output, 64);
       2*:  258:	ASSERT_EQ(expectedCipher, aes.blockToReadable(output, 64));
        -:  259:
        1:  260:	byte *input = aes.decryptOFB(output, 64, cipherKey, IV);
        -:  261:	// cout << aes.blockToReadable(input, 64);
        -:  262:	string expectedMessage = "6b c1 be e2 2e 40 9f 96 e9 3d 7e 11 73 93 17 2a "
        -:  263:							 "ae 2d 8a 57 1e 3 ac 9c 9e b7 6f ac 45 af 8e 51 "
        -:  264:							 "30 c8 1c 46 a3 5c e4 11 e5 fb c1 19 1a a 52 ef "
        1:  265:							 "f6 9f 24 45 df 4f 9b 17 ad 2b 41 7b e6 6c 37 10";
       2*:  266:	ASSERT_EQ(expectedMessage, aes.blockToReadable(input, 64));
        -:  267:
        -:  268:}
------------------
_ZN18TestOFB_Test1_Test8TestBodyEv:
        1:  241:TEST(TestOFB, Test1)
        -:  242:{
        1:  243:	Aes aes(128);
        -:  244:
        1:  245:	byte message[64] = {0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
        -:  246:	0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
        -:  247:	0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
        -:  248:	0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10};
        -:  249:
        1:  250:	byte cipherKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
        1:  251:	byte IV[16] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        -:  252:	string expectedCipher = "3b 3f d9 2e b7 2d ad 20 33 34 49 f8 e8 3c fb 4a "
        -:  253:							"77 89 50 8d 16 91 8f 3 f5 3c 52 da c5 4e d8 25 "
        -:  254:							"97 40 5 1e 9c 5f ec f6 43 44 f7 a8 22 60 ed cc "
        1:  255:							"30 4c 65 28 f6 59 c7 78 66 a5 10 d9 c1 d6 ae 5e";
        1:  256:	byte *output = aes.encryptOFB(message, 64, cipherKey, IV);
        -:  257:	// cout << aes.blockToReadable(output, 64);
       2*:  258:	ASSERT_EQ(expectedCipher, aes.blockToReadable(output, 64));
        -:  259:
        1:  260:	byte *input = aes.decryptOFB(output, 64, cipherKey, IV);
        -:  261:	// cout << aes.blockToReadable(input, 64);
        -:  262:	string expectedMessage = "6b c1 be e2 2e 40 9f 96 e9 3d 7e 11 73 93 17 2a "
        -:  263:							 "ae 2d 8a 57 1e 3 ac 9c 9e b7 6f ac 45 af 8e 51 "
        -:  264:							 "30 c8 1c 46 a3 5c e4 11 e5 fb c1 19 1a a 52 ef "
        1:  265:							 "f6 9f 24 45 df 4f 9b 17 ad 2b 41 7b e6 6c 37 10";
       2*:  266:	ASSERT_EQ(expectedMessage, aes.blockToReadable(input, 64));
        -:  267:
        -:  268:}
------------------
_ZN18TestOFB_Test1_TestC2Ev:
        1:  241:TEST(TestOFB, Test1)
------------------
        -:  269:
        2:  270:TEST(TestOFB, TestMessagenotmultipleofblocksize)
        -:  271:{
        1:  272:	Aes aes(128);
        -:  273:
        1:  274:	byte message[64] = {0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
        -:  275:	0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
        -:  276:	0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
        -:  277:	0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37};
        -:  278:
        1:  279:	byte cipherKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
        1:  280:	byte IV[16] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        -:  281:	string expectedCipher = "3b 3f d9 2e b7 2d ad 20 33 34 49 f8 e8 3c fb 4a "
        -:  282:							"77 89 50 8d 16 91 8f 3 f5 3c 52 da c5 4e d8 25 "
        -:  283:							"97 40 5 1e 9c 5f ec f6 43 44 f7 a8 22 60 ed cc "
        1:  284:							"30 4c 65 28 f6 59 c7 78 66 a5 10 d9 c1 d6 ae";
        1:  285:	byte *output = aes.encryptOFB(message, 63, cipherKey, IV);
        -:  286:	// cout << aes.blockToReadable(output, 63);
       2*:  287:	ASSERT_EQ(expectedCipher, aes.blockToReadable(output, 63));
        -:  288:
        1:  289:	byte *input = aes.decryptOFB(output, 63, cipherKey, IV);
        -:  290:	// cout << aes.blockToReadable(input, 64);
        -:  291:	string expectedMessage = "6b c1 be e2 2e 40 9f 96 e9 3d 7e 11 73 93 17 2a "
        -:  292:							 "ae 2d 8a 57 1e 3 ac 9c 9e b7 6f ac 45 af 8e 51 "
        -:  293:							 "30 c8 1c 46 a3 5c e4 11 e5 fb c1 19 1a a 52 ef "
        1:  294:							 "f6 9f 24 45 df 4f 9b 17 ad 2b 41 7b e6 6c 37";
       2*:  295:	ASSERT_EQ(expectedMessage, aes.blockToReadable(input, 63));
        -:  296:
        -:  297:}
------------------
_ZN46TestOFB_TestMessagenotmultipleofblocksize_Test8TestBodyEv:
        1:  270:TEST(TestOFB, TestMessagenotmultipleofblocksize)
        -:  271:{
        1:  272:	Aes aes(128);
        -:  273:
        1:  274:	byte message[64] = {0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
        -:  275:	0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
        -:  276:	0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
        -:  277:	0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37};
        -:  278:
        1:  279:	byte cipherKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
        1:  280:	byte IV[16] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};
        -:  281:	string expectedCipher = "3b 3f d9 2e b7 2d ad 20 33 34 49 f8 e8 3c fb 4a "
        -:  282:							"77 89 50 8d 16 91 8f 3 f5 3c 52 da c5 4e d8 25 "
        -:  283:							"97 40 5 1e 9c 5f ec f6 43 44 f7 a8 22 60 ed cc "
        1:  284:							"30 4c 65 28 f6 59 c7 78 66 a5 10 d9 c1 d6 ae";
        1:  285:	byte *output = aes.encryptOFB(message, 63, cipherKey, IV);
        -:  286:	// cout << aes.blockToReadable(output, 63);
       2*:  287:	ASSERT_EQ(expectedCipher, aes.blockToReadable(output, 63));
        -:  288:
        1:  289:	byte *input = aes.decryptOFB(output, 63, cipherKey, IV);
        -:  290:	// cout << aes.blockToReadable(input, 64);
        -:  291:	string expectedMessage = "6b c1 be e2 2e 40 9f 96 e9 3d 7e 11 73 93 17 2a "
        -:  292:							 "ae 2d 8a 57 1e 3 ac 9c 9e b7 6f ac 45 af 8e 51 "
        -:  293:							 "30 c8 1c 46 a3 5c e4 11 e5 fb c1 19 1a a 52 ef "
        1:  294:							 "f6 9f 24 45 df 4f 9b 17 ad 2b 41 7b e6 6c 37";
       2*:  295:	ASSERT_EQ(expectedMessage, aes.blockToReadable(input, 63));
        -:  296:
        -:  297:}
------------------
_ZN46TestOFB_TestMessagenotmultipleofblocksize_TestC2Ev:
        1:  270:TEST(TestOFB, TestMessagenotmultipleofblocksize)
------------------
        -:  298:
        2:  299:TEST(TestCTR, Test1)
        -:  300:{
        1:  301:	Aes aes(128);
        1:  302:	byte cipherKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
        1:  303:	byte message[64] = {0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
        -:  304:					   0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
        -:  305:					   0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
        -:  306:					   0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10};
        1:  307:	byte IV[16] = {0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff};
        1:  308:	byte *output = aes.encryptCTR(message, 64, cipherKey, IV);
        -:  309:	// cout << aes.blockToReadable(output, 64);
        -:  310:	string expectedCipher = "87 4d 61 91 b6 20 e3 26 1b ef 68 64 99 d b6 ce "
        -:  311:							"98 6 f6 6b 79 70 fd ff 86 17 18 7b b9 ff fd ff "
        -:  312:							"5a e4 df 3e db d5 d3 5e 5b 4f 9 2 d b0 3e ab "
        1:  313:							"1e 3 1d da 2f be 3 d1 79 21 70 a0 f3 0 9c ee";
       2*:  314:	ASSERT_EQ(expectedCipher, aes.blockToReadable(output, 64));
        -:  315:
        1:  316:	byte *input = aes.decryptCTR(output, 64, cipherKey, IV);
        -:  317:	string expectedMessage = "6b c1 be e2 2e 40 9f 96 e9 3d 7e 11 73 93 17 "
        -:  318:							 "2a ae 2d 8a 57 1e 3 ac 9c 9e b7 6f ac 45 af "
        -:  319:							 "8e 51 30 c8 1c 46 a3 5c e4 11 e5 fb c1 19 "
        1:  320:							 "1a a 52 ef f6 9f 24 45 df 4f 9b 17 ad 2b 41 7b e6 6c 37 10";
       2*:  321:	ASSERT_EQ(expectedMessage, aes.blockToReadable(input, 64));
        -:  322:}
------------------
_ZN18TestCTR_Test1_Test8TestBodyEv:
        1:  299:TEST(TestCTR, Test1)
        -:  300:{
        1:  301:	Aes aes(128);
        1:  302:	byte cipherKey[16] = {0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
        1:  303:	byte message[64] = {0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
        -:  304:					   0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
        -:  305:					   0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
        -:  306:					   0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10};
        1:  307:	byte IV[16] = {0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff};
        1:  308:	byte *output = aes.encryptCTR(message, 64, cipherKey, IV);
        -:  309:	// cout << aes.blockToReadable(output, 64);
        -:  310:	string expectedCipher = "87 4d 61 91 b6 20 e3 26 1b ef 68 64 99 d b6 ce "
        -:  311:							"98 6 f6 6b 79 70 fd ff 86 17 18 7b b9 ff fd ff "
        -:  312:							"5a e4 df 3e db d5 d3 5e 5b 4f 9 2 d b0 3e ab "
        1:  313:							"1e 3 1d da 2f be 3 d1 79 21 70 a0 f3 0 9c ee";
       2*:  314:	ASSERT_EQ(expectedCipher, aes.blockToReadable(output, 64));
        -:  315:
        1:  316:	byte *input = aes.decryptCTR(output, 64, cipherKey, IV);
        -:  317:	string expectedMessage = "6b c1 be e2 2e 40 9f 96 e9 3d 7e 11 73 93 17 "
        -:  318:							 "2a ae 2d 8a 57 1e 3 ac 9c 9e b7 6f ac 45 af "
        -:  319:							 "8e 51 30 c8 1c 46 a3 5c e4 11 e5 fb c1 19 "
        1:  320:							 "1a a 52 ef f6 9f 24 45 df 4f 9b 17 ad 2b 41 7b e6 6c 37 10";
       2*:  321:	ASSERT_EQ(expectedMessage, aes.blockToReadable(input, 64));
        -:  322:}
------------------
_ZN18TestCTR_Test1_TestC2Ev:
        1:  299:TEST(TestCTR, Test1)
------------------
        -:  323:
        1:  324:int main(int argc, char **argv)
        -:  325:{
        1:  326:	testing::InitGoogleTest(&argc, argv);
        1:  327:	return RUN_ALL_TESTS();
        -:  328:}
